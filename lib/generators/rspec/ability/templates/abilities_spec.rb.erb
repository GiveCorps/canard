require 'rails_helper'
require 'cancan/matchers'

describe Canard::Abilities, '#<%= plural_name %>' do
<% if Rails.configuration.generators.options[:rails][:fixture_replacement] == :factory_girl -%>
  let(:acting_<%= name %>) { FactoryGirl.create(:user<%= name == 'user' ? '' : ", :#{name}" %>) }
<% elsif Rails.configuration.generators.options[:rails][:fixture_replacement] == :machinist -%>
  let(:acting_<%= name %>) { User.make!(:<%= name %>) }
<% else -%>
  let(:acting_<%= name %>) { User.create(roles: %w(<%= name -%>)) }
<% end -%>
  subject(:<%= name %>_ability) { Ability.new(acting_<%= name %>) }

<% if ability_definitions.empty? -%>
#   # Define your ability tests thus;
#   describe 'on <%= name.camelize %>' do
#     let(:<%= name %>) { FactoryGirl.create(<%= name %>) }
#
#     it { is_expected.to be_able_to(:index,   <%= name.camelize %>) }
#     it { is_expected.to be_able_to(:show,    <%= name %>) }
#     it { is_expected.to be_able_to(:read,    <%= name %>) }
#     it { is_expected.to be_able_to(:new,     <%= name %>) }
#     it { is_expected.to be_able_to(:create,  <%= name %>) }
#     it { is_expected.to be_able_to(:edit,    <%= name %>) }
#     it { is_expected.to be_able_to(:update,  <%= name %>) }
#     it { is_expected.to be_able_to(:destroy, <%= name %>) }
#   end
#   # on <%= name.camelize %>
<% else -%>
<% definitions do |model, definition| -%>
  <% model_name = model.camelize -%>
describe 'on <%= model_name -%>' do
<% if Rails.configuration.generators.options[:rails][:fixture_replacement] == :factory_girl -%>
    let(:<%= model -%>) { FactoryGirl.create(:<%= model -%>) }
<% elsif Rails.configuration.generators.options[:rails][:fixture_replacement] == :machinist -%>
    let(:<%= model -%>) { <%= model_name -%>.make! }
<% else -%>
    let(:<%= model -%>) { <%= model_name -%>.create }
<% end -%>

<% definition.cans.each do |can| -%>
    it { is_expected.to be_able_to(<%= ":#{can}, #{model}" -%>) }
<% end -%>
<%- definition.cannots.each do |cannot| -%>
    it { is_expected.to_not be_able_to(<%= ":#{cannot}, #{model}" -%>) }
<% end -%>
  end
  # on <%= model_name %>
<% end -%>
<% end -%>
end
